{"version":3,"sources":["components/Recharts.js","index.js"],"names":["dataName","data","name","uv","pv","amt","avgUv","avgPv","stddevUv","stddevPv","i","length","Math","pow","sqrt","MaxUv","MinUv","MaxPv","MinPv","LinePv","this","props","x","y","value","stroke","dy","fill","fontSize","textAnchor","PureComponent","LineUv","CustomizedAxisTick","payload","transform","Example","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","tick","type","label","jsfiddleUrl","render","document","getElementById"],"mappings":"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","file":"static/js/main.7122f74f.chunk.js","sourcesContent":["/* eslint-disable react/no-multi-comp */\r\nimport React, { PureComponent } from 'react';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\n\r\nconst data = [\r\n  {\r\n    name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\r\n  },\r\n  {\r\n    name: 'Page B', uv: 3000, pv: 1398, amt: 2210,\r\n  },\r\n  {\r\n    name: 'Page C', uv: 2000, pv: 9800, amt: 2290,\r\n  },\r\n  {\r\n    name: 'Page D', uv: 2780, pv: 3908, amt: 2000,\r\n  },\r\n  {\r\n    name: 'Page E', uv: 1890, pv: 4800, amt: 2181,\r\n  },\r\n  {\r\n    name: 'Page F', uv: 2390, pv: 3800, amt: 2500,\r\n  },\r\n  {\r\n    name: 'Page G', uv: 3490, pv: 4300, amt: 2100,\r\n  },\r\n];\r\n\r\n let dataName;\r\n let avgUv=0;\r\n let avgPv=0;\r\n\r\n let stddevUv=0;\r\n let stddevPv=0;\r\n\r\n // среднее значение\r\n for (var i = 0; i < data.length; i++) {\r\n\r\n    dataName = data[i];\r\n    avgUv = avgUv + dataName.uv;\r\n    avgPv = avgPv + dataName.pv;\r\n }\r\n avgUv = avgUv / data.length;\r\n avgPv = avgPv / data.length;\r\n\r\n\r\n // среднее квадратичное отклонение\r\nfor (var i = 0; i < data.length; i++) {\r\n\r\n    dataName = data[i];\r\n    stddevUv = Math.pow(dataName.uv - avgUv, 2); \r\n    stddevUv += stddevUv; \r\n\r\n    stddevPv = Math.pow(dataName.pv - avgPv, 2); \r\n    stddevPv += stddevPv; \r\n }\r\n\r\n\r\n stddevUv = Math.sqrt(stddevUv / data.length);\r\n stddevPv = Math.sqrt(stddevPv / data.length);\r\n\r\n\r\nconst MaxUv = avgUv + stddevUv;\r\nconst MinUv = avgUv - stddevUv;\r\n\r\nconst MaxPv = avgPv + stddevPv;\r\nconst MinPv = avgPv - stddevPv;\r\n\r\n\r\n\r\nclass LinePv extends PureComponent {\r\n  render() {\r\n    const {\r\n      x, y, stroke, value,\r\n    } = this.props;\r\n    if (MaxPv > value && MinPv > value ) {\r\n     return <text x={x} y={y} dy={-4} fill=\"blue\" fontSize={15} textAnchor=\"middle\">{value}</text>;\r\n       \r\n    }\r\n    return <text x={x} y={y} dy={-4} fill=\"red\" fontSize={15} textAnchor=\"middle\">{value}</text>;\r\n  }\r\n}\r\n\r\nclass LineUv extends PureComponent {\r\n  render() {\r\n    const {\r\n      x, y, stroke, value,\r\n    } = this.props;\r\n    if (MaxUv > value && MinUv > value ) {\r\n     return <text x={x} y={y} dy={-4} fill=\"green\" fontSize={15} textAnchor=\"middle\">{value}</text>;\r\n       \r\n    }\r\n    return <text x={x} y={y} dy={-4} fill=\"red\" fontSize={15} textAnchor=\"middle\">{value}</text>;\r\n  }\r\n}\r\n\r\nclass CustomizedAxisTick extends PureComponent {\r\n  render() {\r\n    const {\r\n      x, y, stroke, payload,\r\n    } = this.props;\r\n\r\n    return (\r\n      <g transform={`translate(${x},${y})`}>\r\n        <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-35)\">{payload.value}</text>\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nexport default class Example extends PureComponent {\r\n  static jsfiddleUrl = 'https://jsfiddle.net/alidingling/5br7g9d6/';\r\n\r\n  render() {\r\n    return (\r\n      <LineChart\r\n        width={800}\r\n        height={500}\r\n        data={data}\r\n        margin={{\r\n          top: 20, right: 30, left: 20, bottom: 10,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" height={60} tick={<CustomizedAxisTick />} />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        \r\n        <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" label={<LinePv />} />\r\n        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" label={<LineUv />}/>\r\n      </LineChart>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport ReactDOM, { render } from 'react-dom';\r\nimport Recharts from './components/Recharts.js'\r\n \r\n\r\nrender(<Recharts/>, document.getElementById('root'))"],"sourceRoot":""}